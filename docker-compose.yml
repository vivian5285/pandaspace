version: '3.8'

# 通用配置
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s

services:
  # MongoDB
  mongo:
    image: mongo
    container_name: ${PROJECT_NAME}-mongo
    restart: always
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
      - ./docker/mongo/init:/docker-entrypoint-initdb.d
    ports:
      - ${MONGO_PORT}:27017
    networks:
      - trading_network
    logging: *default-logging
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      <<: *default-healthcheck

  # 用户 API
  user-api:
    build:
      context: ./backend/user-api    # ✅ 正确的相对路径
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}-user-api
    restart: always
    env_file:
      - .env                        # ✅ 使用根目录的 .env
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${USER_API_PORT}
      - MONGO_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/${MONGO_DATABASE}?authSource=admin
    ports:
      - ${USER_API_PORT}:3000
    networks:
      - trading_network
    depends_on:
      mongo:
        condition: service_healthy
    logging: *default-logging

  # 管理 API
  admin-api:
    build:
      context: ./backend/admin-api   # ✅ 正确的相对路径
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}-admin-api
    restart: always
    env_file:
      - .env                        # ✅ 使用根目录的 .env
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${ADMIN_API_PORT}
      - MONGO_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/${MONGO_DATABASE}?authSource=admin
    ports:
      - ${ADMIN_API_PORT}:3001
    networks:
      - trading_network
    depends_on:
      mongo:
        condition: service_healthy
    logging: *default-logging

  # 策略引擎
  strategy-engine:
    build:
      context: ./backend/strategy-engine
      dockerfile: Dockerfile
    container_name: trading-strategy-engine
    restart: always
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongo:27017/trading?authSource=admin
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
    depends_on:
      - mongo
      - user-api
    networks:
      - trading_network

  # 用户前端
  user-ui:
    build:
      context: ./frontend/user-ui    # ✅ 正确的路径
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}-user-ui
    restart: always
    ports:
      - ${USER_UI_PORT}:80
    networks:
      - trading_network
    depends_on:
      - user-api

  # 管理后台前端
  admin-ui:
    build:
      context: ./frontend/admin-ui
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}-admin-ui
    restart: always
    ports:
      - ${ADMIN_UI_PORT}:80
    networks:
      - trading_network
    depends_on:
      - admin-api

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - user-api
      - admin-api
      - user-ui
      - admin-ui
    networks:
      - trading_network

networks:
  trading_network:
    name: ${PROJECT_NAME}-network
    driver: bridge

volumes:
  mongo_data:
    name: ${PROJECT_NAME}-mongo-data
  mongo_config:
    name: ${PROJECT_NAME}-mongo-config 
  mongo_data: 